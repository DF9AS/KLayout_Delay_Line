<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

"""
This Code implements a simple delay line with IDT Transducers

The parameters are:
- l: the layer to use
- w: the width of a single finger
- n: the number of fingers per side
- a: the aperture of one IDT 
- s: the length of the delay line

NOTE: using negative angles makes the Serpentine turn the other way

"""

class DelayLine(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Delay Line
  """

  def __init__(self):

    # Important: initialize the super class
    super(DelayLine, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("n", self.TypeInt, "Number of Fingers", default = 11)
    self.param("w", self.TypeDouble, "The width of a Finger", default = 3.0)
    self.param("a", self.TypeDouble, "Aperture of the IDT", default = 1.0e3)
    self.param("s", self.TypeDouble, "Distance between Transducers", default = 1.5e3)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "DelayLine(L=%s,W=%.6g,A=%.6g,S=%.6g" % (str(self.l), self.w, self.a/1e3, self.s/1e3)  

  def produce_impl(self):

    # This is the main part of the implementation: create the layout

    # compute the Serpentine: generate a list of spine points for the path and then
    # create the path
    
    w_dbu = self.w 
    a_dbu = self.a 
    s_dbu = self.s 
    l_dbu = a_dbu - 2*w_dbu 

    pads = []
    for i,j in [(1,1), (1,-1), (-1,1), (-1,-1)]:
      self.cell.shapes(self.l_layer).insert(pya.DPath([pya.DPoint(i*s_dbu/2, j*(a_dbu/2 + 5*w_dbu)), pya.DPoint(i*(s_dbu/2+1.3*a_dbu), j*(a_dbu/2 + 5*w_dbu)), pya.DPoint(i*7.5e3/2, j*7.5e3/2), pya.DPoint(i*8e3/2, j*8e3/2)], 10*w_dbu))
      self.cell.shapes(self.l_layer).insert(pya.DBox(i*7.5e3/2, j*7.5e3/2, i*8.5e3/2, j*8.5e3/2))  
    
    for i in (1,-1):  
      for n in range(0, 2*self.n):
        self.cell.shapes(self.l_layer).insert(pya.DPath([pya.DPoint(i*(s_dbu/2+w_dbu/2+2*w_dbu*n), (a_dbu/2-w_dbu)+w_dbu*(-1)**n), pya.DPoint(i*(s_dbu/2+w_dbu/2+2*w_dbu*n), -1*(a_dbu/2-w_dbu)+w_dbu*(-1)**n)], w_dbu))

    region =pya.Region.new(self.cell.begin_shapes_rec(self.l_layer)) 
    # merges the polygons (in-place: the region is filled with the merged polygons)
    region.merge()    
    # clears the input layer (in all cells) and puts the 
    # merged polygons back into the cell
    self.layout.clear_layer(self.l_layer)
    self.cell.shapes(self.l_layer).insert(region)


class DelayLineLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):

    # Set the description
    self.description = "DelayLine PCell Library"

    # Create the PCell declarations
    self.layout().register_pcell("DelayLine", DelayLine())

    # Register us with the name "SerpentineLib".
    self.register("DelayLine")


# Instantiate and register the library
DelayLineLib()</text>
</klayout-macro>
